/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import domen.Constants;
import domen.Employee;
import domen.ProjectSimple;
import domen.Task;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.event.MouseEvent.BUTTON3;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import controller.EmployeeController;
import controller.ProjectController;
import controller.TaskController;

/**
 *
 * @author Sofija
 */
public class ProjectsForm extends javax.swing.JFrame
{

    /**
     * Creates new form ProjectsForm
     */
    ProjectController controller;
    TableModelProjects modelProjects;
    List<Employee> listEmployees;
    List<Task> listTask;
    TaskController taskController;
    EmployeeController employeeController;

    public ProjectsForm()
    {
        initComponents();
        setLocationRelativeTo(null);
        this.setTitle("Lista projekata");
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        // this.setSize(866, 600);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProjects = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        lblItems = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        chbDeleted = new javax.swing.JCheckBox();
        btnChange = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        chbActive = new javax.swing.JCheckBox();
        cmbEmployees = new javax.swing.JComboBox<>();
        cmbTasks = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        tblProjects.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tblProjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProjects.setRowHeight(35);
        tblProjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblProjects.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                tblProjectsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblProjects);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel1.setText("Broj stavki:");

        lblItems.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        lblItems.setText("jLabel2");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Projekti");

        chbDeleted.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        chbDeleted.setText("Obrisani");
        chbDeleted.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbDeletedActionPerformed(evt);
            }
        });

        btnChange.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnChange.setText("Izmena");
        btnChange.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnChangeActionPerformed(evt);
            }
        });

        btnNew.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnNew.setText("Novi");
        btnNew.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnNewActionPerformed(evt);
            }
        });

        chbActive.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        chbActive.setText("Aktivni");
        chbActive.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                chbActiveActionPerformed(evt);
            }
        });

        cmbEmployees.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbEmployees.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbEmployeesActionPerformed(evt);
            }
        });

        cmbTasks.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cmbTasks.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cmbTasksActionPerformed(evt);
            }
        });

        jLabel3.setText("Zaposleni");

        jLabel4.setText("Zadatak");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chbActive)
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(108, 108, 108)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(91, 91, 91))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblItems)
                        .addGap(641, 674, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 804, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(chbDeleted)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 485, Short.MAX_VALUE)
                        .addComponent(btnChange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNew)
                        .addGap(45, 45, 45)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnChange, btnNew});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbEmployees, cmbTasks});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chbActive)
                            .addComponent(cmbEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblItems))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chbDeleted)
                    .addComponent(btnChange)
                    .addComponent(btnNew))
                .addGap(42, 42, 42))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnChange, btnNew});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNewActionPerformed
    {//GEN-HEADEREND:event_btnNewActionPerformed
        ProjectForm pf = new ProjectForm(this, rootPaneCheckingEnabled);
        pf.setVisible(true);

        refresh();
    }//GEN-LAST:event_btnNewActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        modelProjects = new TableModelProjects();
        controller = new ProjectController();
        tblProjects.setModel(modelProjects);

        tblProjects.getColumnModel().getColumn(0).setCellRenderer(new ProjectsFormRenderer());

        if (MainForm.logged.getUserType() == Constants.USER)
        {
            btnNew.setEnabled(false);
        }

        employeeController = new EmployeeController();
        taskController = new TaskController();

        fillEmployeesCMB();
        fillTasksCMB();

        refresh();
    }//GEN-LAST:event_formWindowOpened

    private void chbDeletedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbDeletedActionPerformed
    {//GEN-HEADEREND:event_chbDeletedActionPerformed
        refresh();

        if (chbDeleted.isSelected())
        {
            btnNew.setEnabled(false);
            tblProjects.setForeground(Color.RED);
             if(MainForm.logged.getUserType()==Constants.USER){
                btnChange.setEnabled(false);
            }
        } else
        {
            btnNew.setEnabled(true);
            tblProjects.setForeground(Color.BLACK);
            btnChange.setEnabled(false);
        }
    }//GEN-LAST:event_chbDeletedActionPerformed

    private void btnChangeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnChangeActionPerformed
    {//GEN-HEADEREND:event_btnChangeActionPerformed
        int row = tblProjects.getSelectedRow();

        if (row != -1)
        {
            ProjectSimple projekat = modelProjects.getProjekat(row);
            if (chbDeleted.isSelected())
            {
                if (JOptionPane.showConfirmDialog(rootPane, "Želite da aktivirate obrisani projekat", "Brisanje", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                {

                    if (controller.undelete(projekat.getId()))
                    {
                        refresh();
                    }
                }
            } else
            {
                ProjectForm pf = new ProjectForm(this, rootPaneCheckingEnabled, projekat.getId());
                pf.setVisible(true);

                if (pf.resultCode != 0)
                {
                    refresh();
                }

            }

        }
    }//GEN-LAST:event_btnChangeActionPerformed

    private void chbActiveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chbActiveActionPerformed
    {//GEN-HEADEREND:event_chbActiveActionPerformed
        refresh();
    }//GEN-LAST:event_chbActiveActionPerformed

    private void cmbEmployeesActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbEmployeesActionPerformed
    {//GEN-HEADEREND:event_cmbEmployeesActionPerformed
        refresh();
    }//GEN-LAST:event_cmbEmployeesActionPerformed

    private void cmbTasksActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbTasksActionPerformed
    {//GEN-HEADEREND:event_cmbTasksActionPerformed
       refresh();
    }//GEN-LAST:event_cmbTasksActionPerformed

    private void tblProjectsMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_tblProjectsMouseClicked
    {//GEN-HEADEREND:event_tblProjectsMouseClicked
        if (evt.getButton() == BUTTON3)
        {
            int row = tblProjects.rowAtPoint(evt.getPoint());
            tblProjects.setRowSelectionInterval(row, row);

            //JMenu origin= new JMenu();
            JPopupMenu menu = new JPopupMenu();

            JMenuItem izmenaMenuItem = new JMenuItem("Izmena     ");
            izmenaMenuItem.setActionCommand("Izmena");
            izmenaMenuItem.setEnabled(MainForm.logged.getUserType()==Constants.ADMINISTRATOR || !chbDeleted.isSelected());

            JMenuItem noviMenuItem = new JMenuItem("Novi     ");
            noviMenuItem.setActionCommand("Novi");
            noviMenuItem.setEnabled(MainForm.logged.getUserType() == Constants.ADMINISTRATOR && !chbDeleted.isSelected());

            JMenuItem osveziMenuItem = new JMenuItem("Osveži     ");
            osveziMenuItem.setActionCommand("Osveži");

            MenuItemListener menuItemListener = new MenuItemListener();

            izmenaMenuItem.addActionListener(menuItemListener);
            noviMenuItem.addActionListener(menuItemListener);
            osveziMenuItem.addActionListener(menuItemListener);

            menu.add(izmenaMenuItem);
            menu.add(noviMenuItem);
            menu.addSeparator();
            menu.add(osveziMenuItem);

            menu.show(tblProjects, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tblProjectsMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChange;
    private javax.swing.JButton btnNew;
    private javax.swing.JCheckBox chbActive;
    private javax.swing.JCheckBox chbDeleted;
    private javax.swing.JComboBox<Object
    > cmbEmployees;
    private javax.swing.JComboBox<Object> cmbTasks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblItems;
    private javax.swing.JTable tblProjects;
    // End of variables declaration//GEN-END:variables

    private void refresh()
    {
        try
        {
            List<ProjectSimple> projects;
            int employeeID = 0;
            int taskID=0;

            int selectedEmployee = cmbEmployees.getSelectedIndex();
            if (selectedEmployee > 0)
            {
                Employee e = listEmployees.get(selectedEmployee - 1);
                employeeID = e.getId();
            }
            
            int selectedTask=cmbTasks.getSelectedIndex();
            if(selectedTask>0){
                Task t= listTask.get(selectedTask-1);
                taskID=t.getId();
            }

            projects = controller.getList(chbDeleted.isSelected(), employeeID, taskID, chbActive.isSelected());

            modelProjects.setData(projects);
            modelProjects.fireTableDataChanged();

            lblItems.setText(String.valueOf(projects.size()));
        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    private void fillEmployeesCMB()
    {
        try
        {
            listEmployees = employeeController.getList(false);
            int index = 1;

            cmbEmployees.addItem("<svi>");

            for (Employee e : listEmployees)
            {
                cmbEmployees.addItem(e.toString());
                if (MainForm.logged.getUserType() == Constants.USER)
                {
                    if (e.getId() == MainForm.logged.getId())
                    {
                        cmbEmployees.setSelectedIndex(index);
                        cmbEmployees.setEnabled(false);
                    }
                }
                index++;
            }

        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }

    private void fillTasksCMB()
    {
        try
        {
            listTask = taskController.getList(false);

            cmbTasks.addItem("<svi>");

            for (Task t : listTask)
            {
                cmbTasks.addItem(t.toString());

            }
            
            cmbTasks.setSelectedIndex(0);

        } catch (Exception ex)
        {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage());
        }
    }
    
    private class MenuItemListener implements ActionListener
    {

        @Override
        public void actionPerformed(ActionEvent e)
        {
            if (e.getActionCommand().equals("Izmena"))
            {
                btnChangeActionPerformed(e);
            }
            if (e.getActionCommand().equals("Novi"))
            {
                btnNewActionPerformed(e);
            }
            if (e.getActionCommand().equals("Osvezi"))
            {
                refresh();
            }
        }
    }
}
